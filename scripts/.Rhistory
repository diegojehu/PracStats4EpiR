"Daily smokers (1=Yes, 2=No)",
"Current alcohol drinkers (1=No, 2=Yes)",
"Frequency of alcohol consumption (1=Daily, 2=5-6 days per week, 3=1-4 days per week, 4=1-3 days per month, 5=less than monthly)",
"Last time BP measured (1=Past 12 months, 2=1-5 years ago, 3=Not in past 5 years)",
"Height in cms",
"Weight in cms",
"SBP reading 1",
"SBP reading 2",
"SBP reading 3"
)
name <- c(
"gender",
"age",
"curr_smkr",
"daily_smkr",
"curr_alc",
"freq_alc",
"bp_last_meas",
"heigh_cm",
"weight_kg",
"sbp_1",
"sbp_2",
"sbp_3"
)
data.t <- data.frame(
Name=name,
Description=desc
)
knitr::kable(data.t,
caption = "List of variables in STEPS data set")
here()
here("data","WHO-STEPS-training.csv")
View(steps.data)
steps.data <- import("C:/User/Desktop/data/WHO-STEPS-training.csv", na="")
dim(steps.data)
str(steps.data)
unique(steps.data$gender)
# Data needs reformatting
steps.data <- steps.data %>%
mutate(gender = as.factor(gender),
curr_smkr = as.factor(curr_smkr),
daily_smkr = as.factor(daily_smkr),
curr_alc = as.factor(curr_alc),
freq_alc = as.factor(freq_alc),
bp_last_meas = as.factor(bp_last_meas),
sbp_1 = as.numeric(sbp_1),
sbp_2 = as.numeric(sbp_2),
sbp_3 = as.numeric(sbp_3)
) %>%
mutate(gender = case_when(
gender == "" ~ NA
))
str(steps.data)
steps.data <- import(here("data", "WHO-STEPS-training.csv"))
str(steps.data)
steps.data <- steps.data %>%
mutate(gender = case_when(
gender == "" ~ NA
))
str(steps.data)
steps.data <- import(here("data", "WHO-STEPS-training.csv"))
steps.data <- import(here("data", "WHO-STEPS-training.csv"),na="")
str(steps.data)
unique(steps.data$gender)
steps.data <- import(here("data", "WHO-STEPS-training.csv"),na="")
str(steps.data)
unique(steps.data$gender)
# Data needs reformatting
steps.data.test <- steps.data %>%
mutate(gender = recode(gender,
"Men" = "Men",
"Women" = "Women",
"" = NA
))  %>%
mutate(gender = as.factor(gender),
curr_smkr = as.factor(curr_smkr),
daily_smkr = as.factor(daily_smkr),
curr_alc = as.factor(curr_alc),
freq_alc = as.factor(freq_alc),
bp_last_meas = as.factor(bp_last_meas),
sbp_1 = as.numeric(sbp_1),
sbp_2 = as.numeric(sbp_2),
sbp_3 = as.numeric(sbp_3)
)
# Data needs reformatting
steps.data.test <- steps.data %>%
na_if(gender, "") %>%
# mutate(gender = recode(gender,
#                        "Men" = "Men",
#                        "Women" = "Women",
#                        "" = NA
# ))  %>%
mutate(gender = as.factor(gender),
curr_smkr = as.factor(curr_smkr),
daily_smkr = as.factor(daily_smkr),
curr_alc = as.factor(curr_alc),
freq_alc = as.factor(freq_alc),
bp_last_meas = as.factor(bp_last_meas),
sbp_1 = as.numeric(sbp_1),
sbp_2 = as.numeric(sbp_2),
sbp_3 = as.numeric(sbp_3)
)
steps.data <- import(here("data", "WHO-STEPS-training.csv"),na=c(""))
str(steps.data)
unique(steps.data$gender)
steps.data <- import(here("data", "WHO-STEPS-training.csv"),na=c(""))
steps.data <- import(here("data", "WHO-STEPS-training.csv"))
steps.data.test <- steps.data %>%
ifelse(gender=="",NA,gender)
ifelse(steps.data$gender=="",steps.data$gender<-NA,steps.data$gender<-steps.data$gender)
View(steps.data)
steps.data <- import(here("data", "WHO-STEPS-training.csv"))
steps.data[steps.data==""] <- na
steps.data[steps.data==""] <- NA
unique(steps.data$gender)
# Data needs reformatting
steps.data[steps.data==""] <- NA # Define "" as missing
steps.data <- steps.data %>%
mutate(gender = as.factor(gender),
curr_smkr = as.factor(curr_smkr),
daily_smkr = as.factor(daily_smkr),
curr_alc = as.factor(curr_alc),
freq_alc = as.factor(freq_alc),
bp_last_meas = as.factor(bp_last_meas),
sbp_1 = as.numeric(sbp_1),
sbp_2 = as.numeric(sbp_2),
sbp_3 = as.numeric(sbp_3)
)
str(steps.data)
summary(steps.data)
sd(steps.data)
sd(steps.data$sbp_1)
sd(steps.data$sbp_1, na.rm=T)
sd(steps.data$age, na.rm=T)
sd(steps.data$height_cm, na.rm=T)
sd(steps.data$weight_cm, na.rm=T)
sd(steps.data$weight_kg, na.rm=T)
steps.data <- read.csv(here("data", "WHO-STEPS-training.csv"), header = T, na.strings=c("")) #In this data, missing values are in
str(steps.data)
summary(steps.data)
getwd()
dim(steps.data)
nrow(steps.data)
ncol(steps.data)
dim(steps.data)[1]
# same as
nrow(steps.data)
dim(steps.data)[2]
# same as
ncol(steps.data)
steps.data[steps.data==""] <- NA # Define "" as missing in case it was not done when importing
steps.data$gender    <- as.factor(steps.data$gender)
class(steps.data$gender)
steps.data$curr_smkr <- as.factor(steps.data$curr_smkr)
steps.data$daily_smkr <- as.factor(steps.data$daily_smkr)
steps.data$curr_alc  <- as.factor(steps.data$curr_alc)
steps.data$freq_alc    <- as.factor(steps.data$freq_alc)
steps.data$bp_last_meas <- as.factor(steps.data$bp_last_meas)
steps.data$sbp_1 <- as.numeric(steps.data$sbp_1)
steps.data$sbp_2 <- as.numeric(steps.data$sbp_2)
steps.data$sbp_3 <- as.numeric(steps.data$sbp_3)
str(steps.data)
head(steps.data,n=5)
hist(steps.data$height_cm, main="Histogram of height",xlab="Height in cm")
hist(steps.data$height_cm,
main="Histogram of height",
xlab="Height in cm")
hist(steps.data$height_cm,
main="Histogram of height",
xlab="Height in cm",
breaks = 50)
boxplot(steps.data$height_cm,
main="Boxplot of height",
ylab="Height in cm")
getwd()
bar(steps.data$gender)
barplot(steps.data$gender)
table(steps$gender)
table(steps.data$gender)
barplot(table(steps.data$gender))
barplot(table(steps.data$curr_smkr))
str(steps.data)
barplot(table(steps.data$bp_last_meas)
)
counts <- table(steps.data$bp_last_meas)
barplot(counts,
main = "Last BP Measurement",
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago"))
counts <- table(steps.data$bp_last_meas)
barplot(counts,
main = "Last BP Measurement",
ylab = "No. of participants",
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago"))
counts
prop <- counts/nrow(steps.data)
prop
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
yrange = c(0,1),
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
ylim = c(0,1),
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
class(counts)
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
ylim = c(0,1), # Define the yaxis
col = "brick",
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
ylim = c(0,1), # Define the yaxis
col = "redbrick",
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
ylim = c(0,1), # Define the yaxis
col = "firebrick2", #There are dozens of named colours in R - I like this one
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
ylim = c(0,1), # Define the yaxis
col = "firebrick4", #There are dozens of named colours in R - I like this one
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
barplot(prop, # Data to plot
main = "Last BP Measurement", # Title of plot
ylab = "Proportion of participants", # Y-axis label
ylim = c(0,1), # Define the yaxis
col = "firebrick3", #There are dozens of named colours in R - I like this one
names.arg = c("Last 12 months", "1-5 years ago", ">5 years ago")) # Categories labels (taken from the data dictionary)
weight <- steps.data$weight_kg
height <- steps.data$height_cm
bmi <- weight / (height/100)^2
test.df <- steps.data
test.df$bmi <- bmi
str(test.df$bmi)
help()
?
help.start()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(devtools)
if (!require("emo")) devtools::install_github("hadley/emo")
#pacman::p_load(tidyverse,here,rio,knitr,emo,skimr,ggplot2,janitor)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(rio,here)
steps.data <- import(here("data", "WHO-STEPS-training.csv"), na="") #In this data, missing values are in blank
desc <- c(
"Gender (Women or Men)",
"Age",
"Current smokers (1=Yes, 2=No)",
"Daily smokers (1=Yes, 2=No)",
"Current alcohol drinkers (1=No, 2=Yes)",
"Frequency of alcohol consumption (1=Daily, 2=5-6 days per week, 3=1-4 days per week, 4=1-3 days per month, 5=less than monthly)",
"Last time BP measured (1=Past 12 months, 2=1-5 years ago, 3=Not in past 5 years)",
"Height in cm",
"Weight in kg",
"SBP reading 1",
"SBP reading 2",
"SBP reading 3"
)
name <- c(
"gender",
"age",
"curr_smkr",
"daily_smkr",
"curr_alc",
"freq_alc",
"bp_last_meas",
"heigh_cm",
"weight_kg",
"sbp_1",
"sbp_2",
"sbp_3"
)
data.t <- data.frame(
Name=name,
Description=desc
)
knitr::kable(data.t,
caption = "List of variables in STEPS data set")
steps.data <- read.csv(here("data", "WHO-STEPS-training.csv"), header = T, na.strings=c("")) #In this data, missing values are in blank
knitr::include_graphics("img/R_data_structures.png")
#steps.data <- import(here("data", "WHO-STEPS-training.csv"))
dim(steps.data)
nrow(steps.data)
ncol(steps.data)
dim(steps.data)[1]
nrow(steps.data)
dim(steps.data)[2]
ncol(steps.data)
head(steps.data,n=5)
tail(steps.data,n=5)
str(steps.data)
# Data needs reformatting
steps.data[steps.data==""] <- NA # Define "" as missing in case it was not done when importing
steps.data$gender       <- as.factor(steps.data$gender)       # Defines gender as factor
steps.data$curr_smkr    <- as.factor(steps.data$curr_smkr)    # Defines curr_smkr as factor
steps.data$daily_smkr   <- as.factor(steps.data$daily_smkr)   # Defines daily_smkr as factor
steps.data$curr_alc     <- as.factor(steps.data$curr_alc)     # Defines curr_alc as factor
steps.data$freq_alc     <- as.factor(steps.data$freq_alc)     # Defines freq_alc as factor
steps.data$bp_last_meas <- as.factor(steps.data$bp_last_meas) # Defines bp_last_meas as factor
steps.data$sbp_1        <- as.numeric(steps.data$sbp_1)       # Defines sbp_1 as numeric
steps.data$sbp_2        <- as.numeric(steps.data$sbp_2)       # Defines sbp_2 as numeric
steps.data$sbp_3        <- as.numeric(steps.data$sbp_3)       # Defines sbp_3 as numeric
str(steps.data)
summary(steps.data)
summary(steps.data$sbp_1)
mean(steps.data$height_cm)
mean(steps.data$height_cm, na.rm=TRUE) # na.rm removes NAs (missings)
hist(steps.data$height_cm,
main="Histogram of height",
xlab="Height in cm")
hist(steps.data$height_cm,
main="Histogram of height",
xlab="Height in cm",
breaks = 50)
boxplot(steps.data$height_cm,
main="Boxplot of height",
ylab="Height in cm")
boxplot(steps.data$height_cm,
main="Boxplot of height",
ylab="Height in cm")
hist(steps.data$height_cm[steps.data$height_cm>100], # Note that the [ ] help define a subset of observations
main="Histogram of height",
xlab="Height in cm",
breaks = 50)
boxplot(steps.data$height_cm[steps.data$height_cm>100], # Note that the [ ] help define a subset of observations
main="Boxplot of height",
ylab="Height in cm")
30+50 #Just a sum
a <- 30 #Assign values to objects
b <- 50
a+b #And then use the objects for calculations
c <- a+b
c
vec.a <- c(1,2,4,5,6,7,8,3) # Make a vector with the function c( )
vec.b <- c(2,3,6,7,8,9,5,4)
vec.c <- vec.a+vec.b
steps.data$bmi <- NA # It is a good idea to start a new variable by defining the column with all observations missing
# use indentations and lines to facilitate reading your code
steps.data$bmi <- # Assign to the new variable bmi
steps.data$weight_kg / # weight in kg
((steps.data$height_cm)/100)^2 # height in m squared
summary(steps.data$bmi)
hist(steps.data$bmi, breaks=30, main="Histogram of BMI")
boxplot(steps.data$bmi, main="Boxplot of BMI")
steps.data$bmi[steps.data$bmi>60] <- NA #Setting implausible values (i.e. BMI >60) as missing
summary(steps.data$bmi)
hist(steps.data$bmi, breaks=50, main="Histogram of BMI", xlab="Body-mass index")
boxplot(steps.data$bmi, main="Boxplot of BMI", ylab="Body-mass index")
steps.data$bmi_who<-NA #Define the row as all missing
steps.data$bmi_who[steps.data$bmi<18.5]<-0 #Those with bmi <18.5 assigned with a 0 in column bmi_who
steps.data$bmi_who[steps.data$bmi>=18.5 & steps.data$bmi<25]<-1 #Those with bmi 18.5-24.9 assigned with a 1 in column bmi_who
steps.data$bmi_who[steps.data$bmi>=25 & steps.data$bmi<30]<-2 #Those with bmi 25-29.9 assigned with a 3 in column bmi_who
steps.data$bmi_who[steps.data$bmi>=30]<-3 #Those with bmi <18.5 assigned with a 0 in column bmi_who
summary(steps.data$bmi_who)
class(steps.data$bmi_who)
steps.data$bmi_who <- factor(steps.data$bmi_who, # define as factor
labels=c("<18.5", "18.5-24.9", "25-29.9", ">30")) #add labels
summary(steps.data$bmi_who)
steps.data$bmi_who2 <- cut(steps.data$bmi, # defines as factor
breaks=c(0,18.5,25,30,100), # defines breaks
labels=c("<18.5", "18.5-24.9", "25-29.9", ">30")) # adds label
summary(steps.data$bmi_who2)
table(steps.data$bmi_who,steps.data$bmi_who2)
new.steps.data<-c() # Create an empty object
new.steps.data<-data.frame(
"age"=steps.data$age,        #Creates column "age" using the column age from object steps.data
"bmi"=steps.data$bmi,        #Creates column "bmi" using the column bmi from object steps.data
"gender"=steps.data$gender)  #Creates column "gender" using the column gender from object steps.data
new.steps.data.2<-subset(steps.data,
age > 40,
select = c(age, bmi, gender))
here()
here("data","WHO-STEPS-training.csv")
pacman::p_load(skimr)
skim(steps.data)
pacman::p_load(naniar)
gg_miss_var(steps.data, show_pct=T)
gg_miss_var(steps.data, show_pct=T, facet = gender)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(devtools,rio,here,tidyverse)
if (!require("emo")) devtools::install_github("hadley/emo")
pacman::p_load(knitr,emo,skimr)
knitr::opts_chunk$set(echo = TRUE)
w.hall.data <- import(here("data","Whitehall_like-Baseline.csv"), na.strings = ".")
skim.w.hall.data <- skim(w.hall.data)
desc <- c(
"Participant ID in this dataset",
"Age",
"Prior disease: heart attack diagnosed",
"Prior disease: angina diagnosed",
"Prior disease: stroke diagnosed",
"Prior disease: diabetes diagnosed",
"Prior disease: cancer diagnosed",
"Systolic blood pressure",
"Body-mass index (kg/m^2)",
"Current smoker (1=yes, 0=no)",
"HDL cholesterol (mmol/L)",
"LDL cholesterol (mmol/L)",
"ApoB (g/L)",
"ApoA1 (g/L)",
"Total cholesterol (mmol/L)",
"C-reactive protein (mmol/l)",
"Vitamin D [25(OH)D] nmol/L"
)
name <- c(
"WHL1_D",
"AGE",
"HATTACK",
"ANGINA",
"STROKE",
"DIAB",
"CANCER",
"SBP",
"BMI",
"CURRSMOKER",
"HDLC",
"LDLC",
"APOB",
"APOA1",
"CHOL",
"CPR",
"VitD"
)
data.t <- data.frame(
Name=name,
Description=desc
)
knitr::kable(data.t,
caption = "List of variables in Whitehall data set")
read.csv("path/to/my_project/data/Whitehall_like-Baseline.csv", header = T, na.strings = ".")
hist (w.hall.data$LDLC, density=20 , prob = TRUE , breaks = 15)
hist (w.hall.data$LDLC, density=20 , prob = TRUE , breaks = 25)
hist (w.hall.data$LDLC, density=20 , prob=TRUE , breaks=25, main="Histogram of LDL-C", xlab="LDL-C")
hist (w.hall.data$LDLC, density=20 , prob=TRUE , breaks=25, main="Histogram of LDL-C", xlab="LDL-C, mmol/L")
# For this we will need a bit more code
hist (w.hall.data$LDLC, density=20, prob=TRUE , breaks=25, main="Histogram of LDL-C", xlab="LDL-C, mmol/L")
LDLC.mu = mean(w.hall.data$LDLC,na.rm = TRUE ) #Define sample mean
LDLC.sd = sd(w.hall.data$LDLC,na.rm = TRUE ) # Define SD
curve( dnorm(x , mean = LDLC.mu, sd = LDLC.sd ) , col="darkblue" , lwd=2, add=TRUE, yaxt="n")
ggplot(w.hall.data, aes(LDLC)) + # Plot histogram
geom_histogram(colour="white", fill="seagreen") + # A little bit of colour
theme_classic() # Use a ggplot classic theme
t.test(LDLC~agegp, data=w.hall.data)$conf.int[2]
samplesizes <- seq(from=200, to=2000, by=200)
power.samplesizes <- power.prop.test(n=samplesizes, p1=0.1, p2=0.15)$power
power.samplesizes
plot(samplesizes, power.samplesizes,
xlim=c(200, 2000),
xlab='Sample size',
ylab='Expected power',
ylim=c(0,1),
type='b',
axes=FALSE)
axis(1,at=c(200,400,600,800,1000,1200,1400,1600,1800,2000))
axis(2,at=c(0,0.25,0.5,0.75,1),labels=paste(c(0,25,50,75,100),"%"))
samplesizes <- seq(from=200, to=2000, by=200)
power.samplesizes <- power.t.test(n=samplesizes, delta=5, sd=15, sig.level=0.05)$power
power.samplesizes
plot(samplesizes, power.samplesizes,
xlim=c(200, 2000),
xlab='Sample size',
ylab='Expected power',
ylim=c(0,1),
type='b',
axes=FALSE)
axis(1,at=c(200,400,600,800,1000,1200,1400,1600,1800,2000))
axis(2,at=c(0,0.25,0.5,0.75,1),labels=paste(c(0,25,50,75,100),"%"))
samplesizes <- seq(from=50, to=1000, by=50)
power.samplesizes <- power.t.test(n=samplesizes, delta=5, sd=15, sig.level=0.05)$power
power.samplesizes
plot(samplesizes, power.samplesizes,
xlim=c(200, 2000),
xlab='Sample size',
ylab='Expected power',
ylim=c(0,1),
type='b',
axes=FALSE)
axis(1,at=samplesizes)
axis(2,at=c(0,0.25,0.5,0.75,1),labels=paste(c(0,25,50,75,100),"%"))
plot(samplesizes, power.samplesizes,
xlim=c(50, 1000),
xlab='Sample size',
ylab='Expected power',
ylim=c(0,1),
type='b',
axes=FALSE)
axis(1,at=samplesizes)
axis(2,at=c(0,0.25,0.5,0.75,1),labels=paste(c(0,25,50,75,100),"%"))
samplesizes <- seq(from=50, to=500, by=50)
power.samplesizes <- power.t.test(n=samplesizes, delta=5, sd=15, sig.level=0.05)$power
plot(samplesizes, power.samplesizes,
xlim=c(50, 500),
xlab='Sample size',
ylab='Expected power',
ylim=c(0,1),
type='b',
axes=FALSE)
axis(1,at=samplesizes)
axis(2,at=c(0,0.25,0.5,0.75,1),labels=paste(c(0,25,50,75,100),"%"))
